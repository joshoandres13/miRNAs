query <- paste0(gene, " AND metabolism", " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
genes_hsa_miR_520d_5p_validated_mirtarbase <- unique(filter_val_hsa_miR_520d_5p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_520d_5p/rentrez_search/updated_metabolism_obesity.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_520d_5p_validated_mirtarbase) {
query <- paste0(gene, " AND metabolism", " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
# Filter with the updated databases, experiment, support_type y type
filter_val_hsa_miR_655_3p <- val_hsa_miR_655_3p@data[
val_hsa_miR_655_3p@data[["database"]] %in% c("mirtarbase", "tarbase") & # Filtrar por bases de datos especÃ­ficas
grepl("Luciferase|Western blot|qRT-PCR", val_hsa_miR_655_3p@data[["experiment"]], ignore.case = TRUE) &  # Filtro por experimentos especÃ­ficos
val_hsa_miR_655_3p@data[["support_type"]] %in% c("Functional MTI", "Functional MTI (Weak)") &  # Filtro por soporte funcional
val_hsa_miR_655_3p@data[["type"]] == "validated", # Filtro por tipo validado
]
# Table with kable
filter_val_hsa_miR_655_3p |>
kable(format = "html") |>
kable_styling("striped")
# Conserved Sites
# The default is to search validated interactions in human
pre_hsa_miR_655_3p <- get_multimir(org = "hsa",
mirna = 'hsa-miR-655-3p',
table = "predicted",
predicted.cutoff = 10,
predicted.cutoff.type = "p",
predicted.site = "conserved",
add.link = TRUE,
use.tibble = TRUE,
summary = TRUE)
# Check which types of associations were returned
table(pre_hsa_miR_655_3p@data$type)
dim(pre_hsa_miR_655_3p@data)
# Detailed information of the validated miRNA-target interaction
head(pre_hsa_miR_655_3p@data)
genes_hsa_miR_520d_5p_predicted <- unique(filter_pre_hsa_miR_520d_5p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_520d_5p/rentrez_search/predicted_metabolism_updated.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_520d_5p_predicted) {
query <- paste0(gene, " AND metabolism", " AND diabetes",  " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
genes_hsa_miR_655_3p_validated_mirtarbase <- unique(filter_val_hsa_miR_655_3p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_655_3p/rentrez_search/mirtarbase_metabolism.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_655_3p_validated_mirtarbase) {
query <- paste0(gene, " AND metabolism", " AND diabetes")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
genes_hsa_miR_655_3p_predicted <- unique(filter_pre_hsa_miR_655_3p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_655_3p/rentrez_search/predicted_metabolism.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_655_3p_predicted) {
query <- paste0(gene, " AND metabolism", " AND diabetes")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
genes_hsa_miR_655_3p_validated_mirtarbase <- unique(filter_val_hsa_miR_655_3p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_655_3p/rentrez_search/mirtarbase_metabolism.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_655_3p_validated_mirtarbase) {
query <- paste0(gene, " AND metabolism", " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
genes_hsa_miR_520d_5p_validated_mirtarbase <- unique(filter_val_hsa_miR_520d_5p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_520d_5p/rentrez_search/metabolism_obesity_updated.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_520d_5p_validated_mirtarbase) {
query <- paste0(gene, " AND metabolism", " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
genes_hsa_miR_655_3p_validated_mirtarbase <- unique(filter_val_hsa_miR_655_3p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_655_3p/rentrez_search/mirtarbase_metabolism_updated.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_655_3p_validated_mirtarbase) {
query <- paste0(gene, " AND metabolism", " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
genes_hsa_miR_655_3p_predicted <- unique(filter_pre_hsa_miR_655_3p$target_symbol)
# Archivo para guardar los resultados
output_file <- "/home/joshoacr13/Documentos/TFM/mirna_analysis/miRNA_targets/hsa_miR_655_3p/rentrez_search/predicted_metabolism_updated.txt"
# Abrir un archivo para escribir
file_conn <- file(output_file, open = "w")
# Bucle para consultar cada gen
for (gene in genes_hsa_miR_655_3p_predicted) {
query <- paste0(gene, " AND metabolism", " AND diabetes", " AND adipose")
# Buscar en PubMed
search_results <- entrez_search(db = "pubmed", term = query, retmax = 10)
# Si hay resultados, recuperar los abstracts
if (length(search_results$ids) > 0) {
abstracts <- entrez_fetch(db = "pubmed", id = search_results$ids, rettype = "abstract")
writeLines(paste("###---------->", gene, "<----------###", sep = " "), file_conn)
writeLines(abstracts, file_conn)
writeLines("\n", file_conn)
}
}
# Cerrar el archivo
close(file_conn)
cat("Resultados guardados en:", output_file, "\n")
# Filter with the updated databases (targetscan)
filter_pre_hsa_miR_520d_5p <-  pre_hsa_miR_520d_5p@data[pre_hsa_miR_520d_5p@data[["database"]] %in% c("targetscan", "mirdb") ,]
#as.data.frame(pre_hsa_miR_520d_5p@data)
dim(filter_pre_hsa_miR_520d_5p)
print(filter_pre_hsa_miR_520d_5p)
# Table with kable
#filter_pre_hsa_miR_520d_5p |>
#  kable(format = "html") |>
#  kable_styling("striped")
print(go_results_miR_520d_5p_validated@result)
print(go_results_miR_520d_5p_validated@result[1:30,])
head(go_results_miR_520d_5p_validated@result,30)
head(go_results_miR_520d_5p_validated@result,20)
library("isomiRs")
library("readr")
library("tibble")
library("pheatmap")
library("dplyr")
library("ggplot2")
library("DESeq2")
library("kableExtra")
library("ggpubr")
library("compareGroups")
library("org.Mm.eg.db")
library("clusterProfiler")
library("multiMiR")
# Usar IsomirDataSeqFromMirtop
# Steatosis
# Count matrix
countdata_complete <- read_csv("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105-countdata.csv")
# Metadata matrix
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105_metadata_steatosis.Rdata")
mirna_data_steatosis <- IsomirDataSeqFromMirtop(mirtop = countdata_complete, coldata = mdata_steatosis)
# Directorio que contiene los archivos .tsv de cada muestra
path <- "/home/joshoacr13/Documentos/TFM/nfcore-smrnaseq/mirtop_AllSamples/export/"
# Crear la lista de archivos en el directorio especificado
file_list <- list.files(path, pattern = "*.tsv", full.names = TRUE)
print(file_list)
# Usar IsomirDataSeqFromMirtop
# Steatosis
# Count matrix
countdata_complete <- read_csv("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105-countdata.csv")
# Metadata matrix
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105_metadata_steatosis.Rdata")
mirna_data_steatosis <- IsomirDataSeqFromMirtop(mirtop = countdata_complete, coldata = mdata_steatosis)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de refrencia
ids_counts_ref <- isoCounts(mirna_data_steatosis, ref= TRUE, minc = 20, mins = 40)
# Cuentas para los demas
ids_counts_iso5 <- isoCounts(mirna_data_steatosis, iso5 = TRUE, minc = 20, mins = 40)
ids_counts_iso3 <- isoCounts(mirna_data_steatosis, iso3 = TRUE, minc = 20, mins = 40)
ids_counts_add <- isoCounts(mirna_data_steatosis, add= TRUE, minc = 20, mins = 40)
ids_counts_snv <- isoCounts(mirna_data_steatosis, snv= TRUE, minc = 20, mins = 40)
ids_counts_all <- isoCounts(mirna_data_steatosis, iso5 = TRUE,ref= TRUE, iso3 = TRUE,  add= TRUE, snv= TRUE, minc = 20, mins = 40)
# Plot
isoPlot(ids_counts_ref,type="all")
#isoPlot(ids_counts, type="all", column="Ballooning")
#isoPlot(ids_counts, type="iso5")
#isoPlot(ids_counts, type="iso3")
#isoPlot(ids, type="snv")
#isoPlot(ids, type="add")
#isoPlot(ids, type="subs")
# Filtrar isomiRs poco expresados (crudos)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de referencia
ids_counts_ref <- isoCounts(mirna_data_steatosis, ref= TRUE, minc = 20, mins = 40)
# Cuentas para los demas
ids_counts_iso5 <- isoCounts(mirna_data_steatosis, iso5 = TRUE, minc = 20, mins = 40)
# Filtrar isomiRs poco expresados (crudos)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de referencia
ids_counts_ref <- isoCounts(mirna_data_steatosis, ref= TRUE, minc = 20, mins = 40)
library("isomiRs")
library("readr")
library("tibble")
library("pheatmap")
library("dplyr")
library("ggplot2")
library("DESeq2")
library("kableExtra")
library("ggpubr")
library("compareGroups")
library("org.Mm.eg.db")
library("clusterProfiler")
library("multiMiR")
# Filtrar isomiRs poco expresados (crudos)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de referencia
ids_counts_ref <- isoCounts(mirna_data_steatosis, ref= TRUE, minc = 20, mins = 40)
# Obtener conteos crudos
raw_counts_ref <- counts(ids_counts_ref)
dim(raw_counts_ref)
# Table with kable
raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Filtrar isomiRs con un conteo acumulado >= 50
total_counts <- rowSums(raw_counts_ref)
keep_isomiRs <- total_counts >= 50
filtered_ids <- ids_counts_ref[keep_isomiRs, ]
# Obtener conteos
filter_raw_counts_ref <- counts(filtered_ids)
dim(filter_raw_counts_ref)
# Table with kable
filter_raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Plot
isoPlot(filtered_ids,type="all")
# Filtrar isomiRs poco expresados (crudos)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de referencia
ids_counts_ref <- isoCounts(mirna_data_steatosis, ref= TRUE, minc = 20, mins = 40)
# Obtener conteos crudos
raw_counts_ref <- counts(ids_counts_ref)
dim(raw_counts_ref)
# Table with kable
raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Table with kable
raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Filtrar isomiRs poco expresados (crudos)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de referencia
ids_counts_ref <- isoCounts(mirna_data_steatosis, ref= TRUE, minc = 20, mins = 40)
# Obtener conteos crudos
raw_counts_ref <- counts(ids_counts_ref)
dim(raw_counts_ref)
# Table with kable
raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Filtrar isomiRs con un conteo acumulado >= 50
total_counts <- rowSums(raw_counts_ref)
keep_isomiRs <- total_counts >= 50
filtered_ids <- ids_counts_ref[keep_isomiRs, ]
# Obtener conteos
filter_raw_counts_ref <- counts(filtered_ids)
dim(filter_raw_counts_ref)
# Table with kable
filter_raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Plot
isoPlot(filtered_ids,type="all")
raw_counts_ref
View(raw_counts_ref)
# Filtrar isomiRs con un conteo acumulado >= 50
total_counts <- rowSums(raw_counts_ref)
keep_isomiRs <- total_counts >= 50
filtered_ids <- ids_counts_ref[keep_isomiRs, ]
# Obtener conteos
filter_raw_counts_ref <- counts(filtered_ids)
dim(filter_raw_counts_ref)
# Table with kable
filter_raw_counts_ref |>
kable(format = "html") |>
kable_styling("striped")
# Plot
isoPlot(filtered_ids,type="all")
# Cuentas para los demas
ids_counts_iso5 <- isoCounts(mirna_data_steatosis, iso5 = TRUE, minc = 20, mins = 40)
View(ids_counts_iso5)
ids_counts_iso5@assays@data
ids_counts_iso5@assays@data@listData[["counts"]]
raw_counts_iso5 <- counts(ids_counts_iso5)
View(raw_counts_ref)
View(raw_counts_iso5)
ids_counts_all <- isoCounts(mirna_data_steatosis, iso5 = TRUE,ref= TRUE, iso3 = TRUE,  add= TRUE, snv= TRUE, minc = 20, mins = 40)
raw_counts_all <- counts(ids_counts_all)
View(raw_counts_all)
dim(raw_counts_all)
dim(raw_counts_iso5)
dim(raw_counts_ref)
View(raw_counts_ref)
ids_counts <- isoCounts(mirna_data_steatosis)
raw_counts <- counts(ids_counts)
dim(raw_counts)
dim(raw_counts, minc = 20, mins = 40)
ids_counts <- isoCounts(mirna_data_steatosis,minc = 20, mins = 40)
raw_counts <- counts(ids_counts)
dim(raw_counts)
# Sin filtro de referencoa
ids_counts <- isoCounts(mirna_data_steatosis,minc = 20, mins = 40)
raw_counts <- counts(ids_counts)
dim(raw_counts)
dim(raw_counts)
dim(filter_raw_counts_ref)
isoPlot(filtered_ids,type="all")
# Filtrar isomiRs poco expresados (crudos)
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
# Cuentas con los miRNA de referencia
ids_counts <- isoCounts(mirna_data_steatosis, minc = 20, mins = 40)
# Obtener conteos crudos
raw_counts <- counts(ids_counts)
dim(raw_counts)
# Table with kable
raw_counts |>
kable(format = "html") |>
kable_styling("striped")
# Filtrar isomiRs con un conteo acumulado >= 50
total_counts <- rowSums(raw_counts)
keep_isomiRs <- total_counts >= 50
filtered_ids <- ids_counts_ref[keep_isomiRs, ]
# Obtener conteos
filter_raw_counts <- counts(filtered_ids)
dim(filter_raw_counts)
# Table with kable
filter_raw_counts |>
kable(format = "html") |>
kable_styling("striped")
# Plot
isoPlot(filtered_ids,type="all")
# Plot
isoPlot(ids_counts,type="all")
# Plot
isoPlot(filtered_ids,type="all")
# Plot
isoPlot(ids_counts,type="all")
# Usar IsomirDataSeqFromMirtop
# Steatosis
# Count matrix
countdata_complete <- read_csv("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105-countdata.csv")
View(countdata_complete)
# NormalizaciÃ³n (por ejemplo, usando RLE)
normalized_ids <-isoNorm(ids_counts, formula = ~ sexo + steatosis_3cat)
# Table of the counts
t_normalized_ids <- counts(normalized_ids, norm = TRUE)
# Table with kable
t_normalized_ids |>
kable(format = "html") |>
kable_styling("striped")
p_steatosis <-pheatmap(counts(normalized_ids, norm=TRUE)[1:100,],
annotation_col = data.frame(colData(normalized_ids_ref)[,c("sexo","steatosis_3cat"),drop=FALSE]),
show_rownames = FALSE,
scale="row",
filename = "/home/joshoacr13/Documentos/TFM/mirna_analysis/output/graphs/ids_3cat.png",
width = 12,
height = 20)
p_steatosis <-pheatmap(counts(normalized_ids, norm=TRUE)[1:100,],
annotation_col = data.frame(colData(normalized_ids)[,c("sexo","steatosis_3cat"),drop=FALSE]),
show_rownames = FALSE,
scale="row",
filename = "/home/joshoacr13/Documentos/TFM/mirna_analysis/output/graphs/ids_3cat.png",
width = 12,
height = 20)
design(normalized_ids) <- formula(~ sexo + steatosis_3cat)
# Realizar el anÃ¡lisis
dds <- isoDE(normalized_ids, formula = ~ sexo + steatosis_3cat)
# Obtener los resultados
results <- DESeq2::results(dds)
plotMA(dds)
# Table
results |>
kable(format = "html") |>
kable_styling("striped")
# Filtrar por significancia
significant_isomiRs <- results[results$padj < 0.05, ]
significant_isomiRs <- results[results$padj < 0.05 & abs(results$log2FoldChange) > 1, ]
significant_isomiRs
# Table
significant_isomiRs |>
kable(format = "html") |>
kable_styling("striped")
# Ajustar el Modelo Completo
dds <- DESeqDataSetFromMatrix(countData = counts(ids_counts),
colData = colData(ids_counts),
design = ~ sexo + steatosis_3cat)
# Ajustar modelo reducido (sin 'steatosis')
dds <- DESeq(dds, test = "LRT", reduced = ~ sexo)
# Obtener los Resultados
resultsLRT <- results(dds)
significant_isomiRs <- resultsLRT[resultsLRT$padj < 0.1, ]  # Mas Relajado
# Visualizar resultados
plot(resultsLRT$log2FoldChange, -log10(resultsLRT$pvalue),
col = ifelse(resultsLRT$padj < 0.05, "red", "black"),
pch = 20, xlab = "Log2 Fold Change", ylab = "-Log10 p-value")
# Obtener los Resultados
resultsLRT <- results(dds)
significant_isomiRs <- resultsLRT[resultsLRT$padj < 0.1 & abs(resultsLRT$log2FoldChange) > 0.05, ]  # Relajado
# Visualizar resultados
plot(resultsLRT$log2FoldChange, -log10(resultsLRT$pvalue),
col = ifelse(resultsLRT$padj < 0.05, "red", "black"),
pch = 20, xlab = "Log2 Fold Change", ylab = "-Log10 p-value")
resultsLRT |>
kable(format = "html") |>
kable_styling("striped")
significant_isomiRs
significant_isomiRs_estrict <- resultsLRT[resultsLRT$padj < 0.05 & abs(resultsLRT$log2FoldChange) > 1, ]  # Estricto
significant_isomiRs_estrict
significant_isomiRs_relajado <- resultsLRT[resultsLRT$padj < 0.1 & abs(resultsLRT$log2FoldChange) > 0.05, ]  # Relajado
significant_isomiRs_relajado
significant_isomiRs_masrelajado <- resultsLRT[resultsLRT$padj < 0.1, ]  # Mas Relajado
significant_isomiRs_masrelajado
resultsLRT
View(resultsLRT)
resultsLRT@listData
resultsLRT@listData
# Obtener los Resultados
resultsLRT <- results(dds, tidy=T)
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
