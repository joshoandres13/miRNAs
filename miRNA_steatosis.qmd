---
title: "Characterization of miRNA"
author: "J. Andrés Castillo"
format: html
editor: visual
---

## Introduction

miRNAs are small RNA fragments (18-23 nt long) that influence gene expression during development and cell stability. Morin et al (Morin et al. 2008), discovered isomiRs first time after sequencing human stem cells.

IsomiRs are miRNAs that vary slightly in sequence, which result from variations in the cleavage site during miRNA biogenesis (5’-trimming and 3’-trimming variants), nucleotide additions to the 3’-end of the mature miRNA (3’-addition variants) and nucleotide modifications (substitution variants)(Martı́ et al. 2010).

There are many tools designed for isomiR detection, however the majority are web application where user can not control the analysis. The two main command tools for isomiRs mapping are SeqBuster and sRNAbench (Guillermo et al. 2014). isomiRs. package is designed to analyze the output of SeqBuster tool or any other tool after converting to the desire format.

## 1. Installation

```{r, message=F, echo=FALSE}
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("isomiRs")

#install.packages("pheatmap")


#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")

#BiocManager::install("org.Mm.eg.db", force = T)


#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")

#BiocManager::install("clusterProfiler")
```

## 2. Load Packages

```{r, message=FALSE, echo=FALSE}
library("isomiRs")
library("readr")
library("tibble")
library("pheatmap")
library("dplyr")
library("ggplot2")
library("DESeq2")
library("kableExtra")
library("ggpubr")
library("compareGroups")
library("tidyr")
library("org.Mm.eg.db")
library("clusterProfiler")

library("multiMiR")
```

## 3. Import Data

Obtain the names of the samples

```{bash}
cd /home/joshoacr13/Documentos/TFM/nfcore-smrnaseq/mirtop_AllSamples/export
ls /home/joshoacr13/Documentos/TFM/nfcore-smrnaseq/mirtop_AllSamples/export > samples_mirna.txt
mv samples_mirna.txt /home/joshoacr13/Documentos/TFM/nfcore-smrnaseq/mirtop_AllSamples/
```

```{r}
# Read the file
patients <- readLines("/home/joshoacr13/Documentos/TFM/nfcore-smrnaseq/mirtop_AllSamples/samples_mirna.txt")
patients <- patients[c(-1,-26)]
#  Delete
patients <- gsub("\\.tsv$", "", patients)
patients <- gsub("_mirtop_rawData", "", patients)  # Eliminar '_mirtop_rawData'
# Agregar comillas a cada nombre
patients <- paste0('"', patients, '"')
# Save the files
writeLines(patients, "/home/joshoacr13/Documentos/TFM/mirna_analysis/input/samples_mirna.txt")

# Read lines of the modified file
patients <- readLines("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/samples_mirna.txt")
# Convert to vector a string with the format c("nombre1", "nombre2", ...)
patients <- paste0(patients, collapse = ", ")
# Mostrar el resultado
cat(patients)
```

### 3.1. Obtain the metadata Matrix

```{r}
# Check if we have the same names in columns 
# Create the vector with the names
data_nfcore <- c(
  "SC_284", "SC_286", "SC_287", "SC_288", "SC_290", "SC_292", "SC_293", "SC_294", "SC_296", "SC_298", "SC_301", "SC_303", "SC_307", "SC_309", "SC_312", "SC_313", "SC_314", "SC_315", "SC_318", "SC_319", "SC_321", "SC_325", "SC_330", "SC_331", "SC_334", "SC_337", "SC_340", "SC_343", "SC_344", "SC_345", "SC_346", "SC_350", "SC_359", "SC_360", "SC_363", "SC_366", "SC_371", "SC_372", "SC_373", "SC_375", "SC_380", "SC_387", "SC_390", "SC_394", "SC_398", "SC_400", "SC_403", "SC_408", "SC_409", "SC_410", "SC_413", "SC_414", "SC_417", "SC_421", "SC_428", "SC_429", "SC_433", "SC_439", "SC_443", "SC_457", "SC_458", "SC_459", "SC_460", "SC_461", "SC_471", "SC_472", "SC_473", "SC_479", "SC_484", "SC_485", "SC_486", "SC_487", "SC_488", "SC_491", "SC_492", "SC_496", "SC_497", "SC_498")
class(data_nfcore)
```

```{r}
################################################################################
# Categorizada en Esteatosis 
################################################################################
mdata_steatosis <- read_csv("~/Documentos/TFM/mirna_analysis/input/20241104-metadata4JAndres.csv") |>
  mutate(prefix = paste0("SC_",muestra),.before = 1) |>
  mutate(steatosis_3cat = ifelse(Esteatosis == 3, 2, Esteatosis) |> as.factor(),
         steatosis_01 = ifelse(Esteatosis  == 0, 0, 1) |> as.factor(),
         Esteatosis = Esteatosis |> as.factor()) |>
  select(prefix,sexo,Esteatosis, steatosis_3cat, steatosis_01) |>
#  filter(prefix%in%names(mir0)) |>
  arrange(prefix) |>
  column_to_rownames("prefix")

mdata_steatosis <- mdata_steatosis[rownames(mdata_steatosis) %in% data_nfcore, ]


# Transform to data frame
mdata_steatosis <- as.data.frame(mdata_steatosis)
class(mdata_steatosis)

print(mdata_steatosis)
str(mdata_steatosis)

save(mdata_steatosis, file = "/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105_metadata_steatosis.Rdata")
```

### 3.2. Obtain the .tsv files to get the count data

```{r}
# Directorio que contiene los archivos .tsv de cada muestra
path <- "/home/joshoacr13/Documentos/TFM/nfcore-smrnaseq/mirtop_AllSamples/export/"
# Crear la lista de archivos en el directorio especificado
file_list <- list.files(path, pattern = "*.tsv", full.names = TRUE)
print(file_list)
```

```{r}
# Read and combine all the file in a data.frame
all_samples <- lapply(file_list, function(file) {
  # Leer el archivo de muestra
  sample_data <- read.delim(file, sep = "\t")
  
  # Obtener el nombre de la muestra a partir del nombre del archivo
  sample_name <- gsub("_mirtop_rawData.tsv", "", basename(file))
  
  # Renombrar la columna de expresión con el nombre de la muestra
  colnames(sample_data)[ncol(sample_data)] <- sample_name
  
  return(sample_data)
})

# Unir todos los archivos por las columnas compartidas (seq, mir, mism, add, t5, t3)
countdata_complete <- Reduce(function(x, y) merge(x, y, by = c("seq", "mir", "mism", "add", "t5", "t3"), all = TRUE), all_samples)

# Reemplazar NA por 0 (en caso de muestras sin expresión en ciertos isomiRs)
countdata_complete[is.na(countdata_complete)] <- 0

# Export
write.csv(countdata_complete, file = "/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105-countdata.csv", row.names = FALSE)
```

## 4. Create a IsomirDataSeq object

```{r}
# Usar IsomirDataSeqFromMirtop
 # Steatosis 
    # Count matrix
    countdata_complete <- read_csv("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105-countdata.csv")

    # Metadata matrix
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/20241105_metadata_steatosis.Rdata")

mirna_data_steatosis <- IsomirDataSeqFromMirtop(mirtop = countdata_complete, coldata = mdata_steatosis)

  # Save
save(mirna_data_steatosis, file="/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")
```

## 5. Filtration of isomirs less expressed

`isoCounts` This function collapses isomiRs into different groups. It is a similar concept than how to work with gene isoforms. With this function, different changes can be put together into a single miRNA variant. For instance all sequences with variants at 3' end can be considered as different elements in the table or analysis having the following naming hsa-miR-124a-5p.iso.t3:AAA.

```{r}
# Filtrar isomiRs poco expresados (crudos) con el resumen de los isomirs 
load("/home/joshoacr13/Documentos/TFM/mirna_analysis/input/21112024_mirna_data_steatosis.Rdata")

# Cuentas con los miRNA de referencia
ids_counts <- isoCounts(mirna_data_steatosis, minc = 20, mins = 40)

  # Obtener conteos crudos
raw_counts <- counts(ids_counts)
dim(raw_counts)

  # Table with kable
raw_counts |>
  kable(format = "html") |>
  kable_styling("striped")

################################################################

# Filtrar isomiRs con un conteo acumulado >= 50
total_counts <- rowSums(raw_counts)
keep_isomiRs <- total_counts >= 50
filtered_ids <- ids_counts[keep_isomiRs, ]

  # Obtener conteos 
filter_raw_counts <- counts(filtered_ids)
dim(filter_raw_counts)
  
# Table with kable
filter_raw_counts |>
  kable(format = "html") |>
  kable_styling("striped")

# Plot
isoPlot(ids_counts,type="all")

```

```{r}
# Cuentas para los demas 
ids_counts_iso5 <- isoCounts(mirna_data_steatosis, iso5 = TRUE, minc = 20, mins = 40)
raw_counts_iso5 <- counts(ids_counts_iso5)

ids_counts_iso3 <- isoCounts(mirna_data_steatosis, iso3 = TRUE, minc = 20, mins = 40)
ids_counts_add <- isoCounts(mirna_data_steatosis, add= TRUE, minc = 20, mins = 40)
ids_counts_snv <- isoCounts(mirna_data_steatosis, snv= TRUE, minc = 20, mins = 40)

ids_counts_all <- isoCounts(mirna_data_steatosis, iso5 = TRUE,ref= TRUE, iso3 = TRUE,  add= TRUE, snv= TRUE, minc = 20, mins = 40)
raw_counts_all <- counts(ids_counts_all)

dim(raw_counts_all)
dim(raw_counts_iso5)
dim(raw_counts_ref)



# Sin filtro de referencoa
ids_counts <- isoCounts(mirna_data_steatosis,minc = 20, mins = 40)
raw_counts <- counts(ids_counts)
dim(raw_counts)


#isoPlot(ids_counts, type="all", column="Ballooning")
#isoPlot(ids_counts, type="iso5")
#isoPlot(ids_counts, type="iso3")
#isoPlot(ids, type="snv")
#isoPlot(ids, type="add")
#isoPlot(ids, type="subs")

head(counts(ids_counts_ref))
count_ref <- counts(ids_counts_ref)
couts_all <- counts((ids_counts_all))



```

## 6. Normalization of isomirs less expressed

```{r}
# Tres categorias de ESTEATOSIS
# Normalización (por ejemplo, usando RLE)
normalized_ids <-isoNorm(ids_counts, formula = ~ sexo + steatosis_3cat)

# Table of the counts
t_normalized_ids <- counts(normalized_ids, norm = TRUE)

# Table with kable
t_normalized_ids |>
  kable(format = "html") |>
  kable_styling("striped")


p_steatosis <-pheatmap(counts(normalized_ids, norm=TRUE)[1:100,], 
         annotation_col = data.frame(colData(normalized_ids)[,c("sexo","steatosis_3cat"),drop=FALSE]),
         show_rownames = FALSE, 
         scale="row",
         filename = "/home/joshoacr13/Documentos/TFM/mirna_analysis/output/graphs/ids_3cat.png",
         width = 12, 
         height = 20)
```

## 7. Design of the model experimental

```{r}
design(normalized_ids) <- formula(~ sexo + steatosis_3cat)
```

## 8. Diferential expression analysis

```{r}
# Realizar el análisis
dds <- isoDE(normalized_ids, formula = ~ sexo + steatosis_3cat)

# Obtener los resultados
results <- DESeq2::results(dds)

plotMA(dds)

 # Table
results |>
  kable(format = "html") |>
  kable_styling("striped")
```

## 9. Filtration of the significance

```{r}
# Filtrar por significancia
#significant_isomiRs <- results[results$padj < 0.05, ]

significant_isomiRs <- results[results$padj < 0.05 & abs(results$log2FoldChange) > 1, ]
 # Table
significant_isomiRs |>
  kable(format = "html") |>
  kable_styling("striped")
```

## 8. Diferential expression analysis

### Steatosis 3 categorias

`steatosis_3cat` Si el valor de Esteatosis es 3, lo convierte en 2. De lo contrario, mantiene el valor original.

```         
Entonces tengo ESteatosis: 0, 1, 2 (tres categorias)
```

```{r}
# Ajustar el Modelo Completo
dds_3cat <- DESeqDataSetFromMatrix(countData = counts(ids_counts),
                              colData = colData(ids_counts),
                              design = ~ sexo + steatosis_3cat)

# Ajustar modelo reducido (sin 'steatosis')
dds_3cat <- DESeq(dds_3cat, test = "LRT", reduced = ~ sexo)

# Obtener los Resultados
resultsLRT_3cat <- results(dds_3cat, tidy=T)

# Filtrar resultados significativos

significant_isomiRs_estrict <- resultsLRT_3cat[resultsLRT_3cat$padj < 0.05 & abs(resultsLRT_3cat$log2FoldChange) > 1, ]  # Estricto

significant_isomiRs_relajado <- resultsLRT_3cat[resultsLRT_3cat$padj < 0.1 & abs(resultsLRT_3cat$log2FoldChange) > 0.05, ]  # Relajado

significant_isomiRs_masrelajado <- resultsLRT_3cat[resultsLRT_3cat$padj < 0.1, ]  # Mas Relajado


# Visualizar resultados
plot(resultsLRT_3cat$log2FoldChange, -log10(resultsLRT_3cat$pvalue), 
     col = ifelse(resultsLRT_3cat$padj < 0.05, "red", "black"),
     pch = 20, xlab = "Log2 Fold Change", ylab = "-Log10 p-value")


```

```{r}
plotDispEsts(dds_3cat)
```

```{r}
table(colData(dds_3cat)$steatosis_3cat)
hist(resultsLRT_3cat$pvalue, breaks = 50, col = "blue", main = "Distribución de valores p")

```

```{r}
# TOP
top_3cat <- resultsLRT_3cat |> 
  filter(padj < 0.4) |>
  pull(row)

resultsLRT_3cat |> 
  arrange(padj) |>
  head() |>
  kbl(digits = 4) |>
  kable_styling("striped")
```

```{r}
gg_decor <- function(){list(
  geom_boxplot(width=0.6),
  labs(x="Steatosis", y="Normalized counts (log2)"),
  theme_minimal(),
  theme(axis.title = element_text(size = 13),
        strip.text = element_text(size = 14)),
  facet_wrap(~ name, scales = "free_y")
)}
```

```{r}
cuentas0 <- counts(normalized_ids, norm=T) |>
  t() |> as.data.frame()

cuentas <- dplyr::select(cuentas0, any_of(top_3cat)) |>
  bind_cols(colData(normalized_ids) |> as.data.frame()) |>
  pivot_longer(1:length(top_3cat))

ggplot(cuentas, aes(x=steatosis_3cat, y=value)) + gg_decor()
```

### Steatosis 4 categorias

```{r}
# Ajustar el Modelo Completo
dds_4cat <- DESeqDataSetFromMatrix(countData = counts(ids_counts),
                              colData = colData(ids_counts),
                              design = ~ sexo + Esteatosis)

# Ajustar modelo reducido (sin 'steatosis')
dds_4cat <- DESeq(dds_4cat, test = "LRT", reduced = ~ sexo)

# Obtener los Resultados
resultsLRT_4cat <- results(dds_4cat, tidy=T)


# Filtrar resultados significativos

significant_isomiRs_estrict_4cat <- resultsLRT_4cat[resultsLRT_4cat$padj < 0.05 & abs(resultsLRT_4cat$log2FoldChange) > 1, ]  # Estricto

significant_isomiRs_relajado_4cat <- resultsLRT_4cat[resultsLRT_4cat$padj < 0.1 & abs(resultsLRT_4cat$log2FoldChange) > 0.05, ]  # Relajado

significant_isomiRs_masrelajado_4cat <- resultsLRT_4cat[resultsLRT_4cat$padj < 0.1, ]  # Mas Relajado


# Visualizar resultados
plot(resultsLRT_4cat$log2FoldChange, -log10(resultsLRT_4cat$pvalue), 
     col = ifelse(resultsLRT_4cat$padj < 0.05, "red", "black"),
     pch = 20, xlab = "Log2 Fold Change", ylab = "-Log10 p-value")


```

```{r}
plotDispEsts(dds_4cat)
```

```{r}
table(colData(dds_4cat)$steatosis_3cat)
hist(resultsLRT_4cat$pvalue, breaks = 50, col = "blue", main = "Distribución de valores p")

```

```{r}
# TOP
top_4cat <- resultsLRT_4cat |> 
  filter(padj < 0.1) |>
  pull(row)

resultsLRT_4cat |> 
  arrange(padj) |>
  head() |>
  kbl(digits = 4) |>
  kable_styling("striped")
```

```{r}
cuentas0 <- counts(normalized_ids, norm=T) |>
  t() |> as.data.frame()

cuentas_4cat <- dplyr::select(cuentas0, any_of(top_4cat)) |>
  bind_cols(colData(normalized_ids) |> as.data.frame()) |>
  pivot_longer(1:length(top_4cat))

ggplot(cuentas_4cat, aes(x=Esteatosis, y=value)) + gg_decor()
```


### Steatosis 2 categoria

```{r}
# Ajustar el Modelo Completo
dds_2cat <- DESeqDataSetFromMatrix(countData = counts(ids_counts),
                              colData = colData(ids_counts),
                              design = ~ sexo + steatosis_01)

# Ajustar modelo reducido (sin 'steatosis')
dds_2cat <- DESeq(dds_2cat, test = "LRT", reduced = ~ sexo)

# Obtener los Resultados
resultsLRT_2cat <- results(dds_2cat, tidy=T)


# Filtrar resultados significativos

significant_isomiRs_estrict_2cat <- resultsLRT_2cat[resultsLRT_2cat$padj < 0.05 & abs(resultsLRT_2cat$log2FoldChange) > 1, ]  # Estricto

significant_isomiRs_relajado_2cat <- resultsLRT_2cat[resultsLRT_2cat$padj < 0.1 & abs(resultsLRT_2cat$log2FoldChange) > 0.05, ]  # Relajado

significant_isomiRs_masrelajado_2cat <- resultsLRT_2cat[resultsLRT_2cat$padj < 0.1, ]  # Mas Relajado


# Visualizar resultados
plot(resultsLRT_2cat$log2FoldChange, -log10(resultsLRT_2cat$pvalue), 
     col = ifelse(resultsLRT_2cat$padj < 0.05, "red", "black"),
     pch = 20, xlab = "Log2 Fold Change", ylab = "-Log10 p-value")


```

```{r}
plotDispEsts(dds_2cat)
```

```{r}
table(colData(dds_2cat)$steatosis_2cat)
hist(resultsLRT_2cat$pvalue, breaks = 50, col = "blue", main = "Distribución de valores p")

```

```{r}
# TOP
top_2cat <- resultsLRT_2cat |> 
  filter(padj < 0.3) |>
  pull(row)

resultsLRT_2cat |> 
  arrange(padj) |>
  head() |>
  kbl(digits = 4) |>
  kable_styling("striped")
```

```{r}
cuentas0 <- counts(normalized_ids, norm=T) |>
  t() |> as.data.frame()

cuentas_2cat <- dplyr::select(cuentas0, any_of(top_2cat)) |>
  bind_cols(colData(normalized_ids) |> as.data.frame()) |>
  pivot_longer(1:length(top_2cat))

ggplot(cuentas_2cat, aes(x=steatosis_01, y=value)) + gg_decor()
```

## 9. Conclusion 

In this part we decide to choose the steatosis 5 categorias. Y dentro de esto utilizamos el hsa-mir-372-3p and hsa-miR-144-3p, also we confirme this miR because they have a p. adjust value less than 0.05
